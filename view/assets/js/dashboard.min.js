var APP = APP || {};
(function (e) {
  'use strict';

  APP.Others = {
    init: function () {
      this.canvasCart(), this.reInitTooltip();
    },
    canvasCart: function () {
      e(".shop-down").on("click", function (s) {
        s.preventDefault();
        var o = e(this).parent(".input-group"),
            n = o.find("input:not([disabled])"),
            t = parseInt(n.val());
        t > 0 && (t -= 1, n.val(t));
      }), e(".shop-up").on("click", function (s) {
        s.preventDefault();
        var o = e(this).parent(".input-group"),
            n = o.find("input:not([disabled])"),
            t = n.val();
        t !== '' ? (t = parseInt(t), t += 1, n.val(t)) : n.val(1);
      });
    },
    reInitTooltip: function () {
      window.onload = t => {
        e('[data-bs-toggle="tooltip"]').tooltip();
      };
    }
  }, e(document).ready(function () {
    APP.Others.init();
  });
})(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.animation = {
    delay: 100,
    itemQueue: [],
    queueTimer: null,
    $wrapper: null,
    init: function () {
      var t = this;
      t.$wrapper = e("body"), t.itemQueue = [], t.queueTimer = null, typeof delay != "undefined" && (t.delay = delay), t.itemQueue.animated_0 = [], e("body").find("#content").find(">div,>section").each(function (n) {
        e(this).attr("data-animated-id", n + 1), t.itemQueue["animated_" + (n + 1)] = [];
      }), setTimeout(function () {
        t.registerAnimation();
      }, 200);
    },
    registerAnimation: function () {
      var t = this;
      e("[data-animate]:not(.animate__animated)", t.$wrapper).waypoint(function () {
        var s,
            o,
            i = this.element ? this.element : this,
            n = e(i);
        n.is(":visible") ? (s = n.closest("[data-animated-id]"), o = "0", s.length && (o = s.data("animated-id")), t.itemQueue["animated_" + o].push(i), t.processItemQueue()) : n.addClass("animate__" + n.data("animate")).addClass("animate__animated");
      }, {
        offset: "100%",
        triggerOnce: !0
      });
    },
    processItemQueue: function () {
      var t = this;
      if (t.queueTimer) return;
      t.queueTimer = window.setInterval(function () {
        var n,
            s = !1;

        for (let e in t.itemQueue) if (t.itemQueue[e].length) {
          s = !0;
          break;
        }

        if (s) {
          for (let s in t.itemQueue) n = e(t.itemQueue[s].shift()), n.addClass("animate__" + n.data("animate")).addClass("animate__animated");

          t.processItemQueue();
        } else window.clearInterval(t.queueTimer), t.queueTimer = null;
      }, t.delay);
    }
  }, e(document).ready(function () {
    APP.animation.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.backToTop = {
    init: function () {
      this.backToTop();
    },
    backToTop: function () {
      var t = e(".gtf-back-to-top"),
          n = e(window);
      t.length > 0 && (t.on("click", function (t) {
        t.preventDefault(), e("html,body").animate({
          scrollTop: "0px"
        }, 100);
      }), n.on("scroll", function () {
        var e = n.scrollTop(),
            s = n.height() / 2;
        e > s ? t.addClass("in") : t.removeClass("in");
      }));
    }
  }, e(document).ready(function () {
    APP.backToTop.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.backgroundImage = {
    init: function () {
      this.initBackgroundImage();
    },
    initBackgroundImage: function () {
      e(".bg-image:not(.lazy-bg)").each(function () {
        e(this).attr("data-bg-src") && e(this).css("background-image", 'url("' + e(this).attr("data-bg-src") + '")');
      });
    }
  }, APP.backgroundImage.init();
}(jQuery), APP = APP || {}, function () {
  'use strict';

  APP.bsScript = {
    init: function () {
      this.tooltips();
    },
    tooltips: function () {
      const e = document.querySelectorAll('[data-bs-toggle="tooltip"]'),
            t = [...e].map(e => new bootstrap.Tooltip(e));
    }
  }, APP.bsScript.init();
}(jQuery), (() => {
  'use strict';

  const e = "Copy to clipboard",
        n = ['<div class="doc-code-snippet">', '   <div class="doc-clipboard">', '      <button type="button" class="btn-clipboard">', '        <svg class="bi" width="1em" height="1em" fill="currentColor" role="img" aria-label="Copy"><use xlink:href="#clipboard"/></svg>', "      </button>", "   </div>", "</div>"].join('');
  document.querySelectorAll(".doc-example-markup").forEach(e => {
    e.closest(".doc-code-snippet") || (e.insertAdjacentHTML("beforebegin", n), e.previousElementSibling.append(e));
  });

  function s(e, t) {
    document.querySelectorAll(e).forEach(e => {
      bootstrap.Tooltip.getOrCreateInstance(e, {
        title: t
      });
    });
  }

  s(".btn-clipboard", e);
  const t = new ClipboardJS(".btn-clipboard", {
    target: e => e.closest(".doc-code-snippet").querySelector(".doc-example-markup")
  });
  t.on("success", t => {
    const n = t.trigger.querySelector(".bi").firstChild,
          o = bootstrap.Tooltip.getInstance(t.trigger),
          s = "http://www.w3.org/1999/xlink",
          i = n.getAttributeNS(s, "href"),
          a = t.trigger.title;
    o.setContent({
      '.tooltip-inner': "Copied!"
    }), t.trigger.addEventListener("hidden.bs.tooltip", () => {
      o.setContent({
        '.tooltip-inner': e
      });
    }, {
      once: !0
    }), t.clearSelection(), n.setAttributeNS(s, "href", i.replace("clipboard", "check2")), setTimeout(() => {
      n.setAttributeNS(s, "href", i), t.trigger.title = a;
    }, 2e3);
  }), t.on("error", t => {
    const s = /mac/i.test(navigator.userAgent) ? "\u2318" : "Ctrl-",
          o = `Press ${s}C to copy`,
          n = bootstrap.Tooltip.getInstance(t.trigger);
    n.setContent({
      '.tooltip-inner': o
    }), t.trigger.addEventListener("hidden.bs.tooltip", () => {
      n.setContent({
        '.tooltip-inner': e
      });
    }, {
      once: !0
    });
  });
})(), APP = APP || {}, function (e) {
  'use strict';

  APP.collapseTabs = {
    init: function () {
      this.collapseTabSetUp();
    },
    collapseTabSetUp: function () {
      var t = this,
          s = e(".collapse-tabs"),
          n = s.find(".tab-content"),
          o = n.find(".collapse"),
          r = n.find(".collapse.show").attr("id"),
          c = n.find('[data-bs-target="#' + r + '"]'),
          l = s.find(".nav-tabs"),
          i = s.find(".tab-pane"),
          a = s.find(".nav-link");
      c.attr("data-bs-toggle", !1), a.on("show.bs.tab", function () {
        var i = e(this).attr("data-bs-target"),
            s = n.find(i),
            a = n.find("[data-bs-toggle]"),
            r = s.find("[data-bs-toggle]"),
            c = s.find(".collapse");
        t.switchDataToggle(a, r), t.switchStatusActive(o, c, "show");
      }), o.on("show.bs.collapse", function () {
        var r = e(this),
            c = r.closest(".tab-pane").attr("id"),
            s = e(this).closest(".tab-pane"),
            d = n.find("[data-bs-toggle]"),
            u = s.find("[data-bs-toggle]"),
            h = l.find('[data-bs-target="#' + c + '"]');
        o.removeClass("show"), t.switchDataToggle(d, u), t.switchStatusActive(a, h, "active"), t.switchStatusActive(i, s, "active"), t.switchStatusActive(i, s, "show");
      });
    },
    switchDataToggle: function (e, t) {
      e.attr("data-bs-toggle", "collapse"), t.attr("data-bs-toggle", !1);
    },
    switchStatusActive: function (t, n, e) {
      t.removeClass(e), n.addClass(e);
    }
  }, e(document).ready(function () {
    APP.collapseTabs.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.colorModes = {
    init: function () {
      this.colorModes();
    },
    colorModes: function () {
      if (!document.documentElement.hasAttribute("data-bs-theme")) return;

      const e = localStorage.getItem("theme"),
            t = () => e ? e : window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light",
            n = function (e) {
        e === "auto" && window.matchMedia("(prefers-color-scheme: dark)").matches ? document.documentElement.setAttribute("data-bs-theme", "dark") : (e === "auto" && (e = "light"), document.documentElement.setAttribute("data-bs-theme", e));
      };

      n(t());

      const s = (t, n = !1) => {
        const e = document.querySelector(".color-modes");
        if (!e) return;
        document.querySelectorAll("[data-bs-theme-value]").forEach(e => {
          e.classList.remove("active"), e.setAttribute("aria-pressed", "false");
        }), document.querySelectorAll(".color-modes").forEach(n => {
          const s = n.querySelector(".theme-icon-active use"),
                e = n.querySelector('[data-bs-theme-value="' + t + '"]'),
                o = e.querySelector("svg use").getAttribute("href");
          e.classList.add("active"), e.setAttribute("aria-pressed", "true"), s.setAttribute("href", o);
        }), n && e.focus();
      };

      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", () => {
        (e !== "light" || e !== "dark") && n(t());
      });

      const o = function () {
        s(t()), document.querySelectorAll("[data-bs-theme-value]").forEach(e => {
          e.addEventListener("click", () => {
            const t = e.getAttribute("data-bs-theme-value");
            localStorage.setItem("theme", t), n(t), s(t, !0);
          });
        });
      };

      o();
    }
  }, e(document).ready(function () {
    APP.colorModes.init();
  });
}(jQuery), APP = APP || {}, function () {
  'use strict';

  APP.core = {
    _devices: {
      xs: 0,
      sm: "576",
      md: "768",
      lg: "992",
      xl: "1200",
      xxl: "1400"
    },
    isDeviceUp: function (e) {
      return window.matchMedia("(min-width: " + APP.core._devices[e] + "px)").matches;
    },
    isDeviceDown: function (e) {
      return window.matchMedia("(max-width: " + (APP.core._devices[e] - 1) + "px)").matches;
    }
  };
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.countdown = {
    init: function () {
      var n,
          s,
          o,
          t = e("[data-countdown]");
      if (t.length < 1) return;
      n = t.data("countdown-end"), s = new Date(n).getTime(), o = setInterval(function () {
        var n = new Date().getTime(),
            t = s - n,
            i = Math.floor(t / (1e3 * 60 * 60 * 24)),
            a = Math.floor(t % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60)),
            r = Math.floor(t % (1e3 * 60 * 60) / (1e3 * 60)),
            c = Math.floor(t % (1e3 * 60) / 1e3);
        e(".day").html(i), e(".hour").html(("0" + a).slice(-2)), e(".minute").html(("0" + r).slice(-2)), e(".second").html(("0" + c).slice(-2)), t < 0 && clearInterval(o);
      }, 1e3);
    }
  }, e(document).ready(function () {
    APP.countdown.init();
  });
}(jQuery), function (e) {
  'use strict';

  const t = "has-child-dropdown-show";
  e(document).on("show.bs.dropdown", function (n) {
    if (e(n.target).closest("#offCanvasNavBar").length === 0) return;
    e(n.target).hasClass("nav-link") || e(n.target).addClass(t);
  }), e(document).on("hide.bs.dropdown", function (n) {
    if (e(n.target).closest("#offCanvasNavBar").length === 0) return;
    e(n.target).parent().find("." + t).length && n.preventDefault(), e("#offCanvasNavBar").find("." + t).removeClass(t), e(n.target).closest(".nav-item") && !e(n.target).parent().hasClass("nav-item") && (n.clickEvent === void 0 || n.clickEvent && n.clickEvent.target === n.target) && e(n.target).addClass(t);
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.fullPageScroll = {
    $_dots: null,
    _slides: [],
    _isEnabled: !0,
    _tween: null,
    _oldSlide: 0,
    _activeSlide: 0,
    init: function () {
      if (typeof gsap == "undefined") return;
      if (!document.querySelector("body.full-page-scroll")) return;

      if (this._slides = document.querySelectorAll("[data-full-page]"), this.$_dots = e(".full-page-dots"), this.$_dots.length === 0 && (this.$_dots = e('<div class="full-page-dots"></div>'), e("body").append(this.$_dots)), this.$_dots.length) {
        for (let t = 0; t < this._slides.length; t++) {
          let n = e('<div class="full-page-dots-nav"></div>');
          n.attr("title", e(this._slides[t]).data("full-page")), n.attr("data-index", t), this.$_dots.append(n);
        }

        this.$_dots.find(".full-page-dots-nav").each(function () {
          bootstrap.Tooltip.getOrCreateInstance(this, {
            title: this.title,
            container: this.parentNode
          });
        }), this.$_dots.find(".full-page-dots-nav").on("click", function () {
          let t = e(this).attr("data-index");
          APP.fullPageScroll._isEnabled = !1, APP.fullPageScroll.gotoSlide(t);
        });
      }

      document.addEventListener("mousedown", function (e) {
        e.target === document.querySelector("html") && APP.fullPageScroll._tween && (APP.fullPageScroll._tween.pause(), APP.fullPageScroll._isEnabled = !1);
      }), document.addEventListener("mouseup", function (e) {
        e.target === document.querySelector("html") && (APP.fullPageScroll._isEnabled = !0);
      }), window.addEventListener("wheel", function (e) {
        if (APP.fullPageScroll._oldSlide = APP.fullPageScroll._activeSlide, APP.fullPageScroll._activeSlide += e.deltaY > 0 ? 1 : -1, APP.fullPageScroll._activeSlide < 0 && (APP.fullPageScroll._activeSlide = 0), APP.fullPageScroll._activeSlide > APP.fullPageScroll._slides.length && (APP.fullPageScroll._activeSlide = APP.fullPageScroll._slides.length), APP.fullPageScroll._activeSlide === APP.fullPageScroll._oldSlide) return;
        APP.fullPageScroll.gotoSlide(APP.fullPageScroll._activeSlide);
      }), window.addEventListener("scroll", function () {
        APP.fullPageScroll.calculateSlideActive();
      }), e(document).ready(function () {
        APP.fullPageScroll.calculateSlideActive();
      });
    },
    gotoSlide: function (t) {
      if (t >= APP.fullPageScroll._slides.length) return;
      e("html").css("scroll-behavior", "auto");
      let n = APP.fullPageScroll._slides[t];
      APP.fullPageScroll._tween = gsap.to(window, {
        scrollTo: {
          y: n.offsetTop,
          autoKill: !1,
          ease: "Power3.easeInOut"
        },
        duration: .85,
        onComplete: function () {
          APP.fullPageScroll._isEnabled = !0;
        }
      });
    },
    calculateSlideActive: function () {
      let t = window.scrollY,
          e = 0;

      for (let n = 0; n < APP.fullPageScroll._slides.length; n++) {
        let s = APP.fullPageScroll._slides[n].offsetTop;
        if (s - t > window.innerHeight * 2 / 3) break;
        e = n;
      }

      APP.fullPageScroll.activeDot(e);
    },
    activeDot: function (t) {
      let n = APP.fullPageScroll._slides[t];

      if (APP.fullPageScroll.$_dots.length) {
        let s = e(n).data("full-page-dots");
        APP.fullPageScroll.$_dots.removeClass("dark light"), s !== void 0 && APP.fullPageScroll.$_dots.addClass(s), APP.fullPageScroll.$_dots.find(".full-page-dots-nav").removeClass("active");
        let o = APP.fullPageScroll.$_dots.find('.full-page-dots-nav[data-index="' + t + '"]');
        o.addClass("active");
      }
    }
  }, APP.fullPageScroll.init();
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.gallery = {
    init: function () {
      this.lightGallery();
    },
    lightGallery: function () {
      e(document).on("click", "a.view-single-image", function (s) {
        s.preventDefault();
        var n = e(this),
            t = n.attr("href"),
            o = n.attr("title");
        lightGallery(this, {
          plugins: [lgThumbnail, lgZoom],
          dynamic: !0,
          hash: !1,
          dynamicEl: [{
            src: t,
            downloadUrl: t,
            thumb: t,
            subHtml: o
          }],
          index: 0
        }).openGallery();
      }), e(document).on("click", "a[data-gallery]", function (o) {
        o.preventDefault();
        var i = e(this),
            t = i.data("gallery"),
            n = [],
            s = 0,
            a = e(this).attr("href"),
            r = e(this).data("thumb-src");
        e('[data-gallery="' + t + '"]').each(function (c) {
          var t = e(this).attr("href"),
              o = e(this).data("thumb-src"),
              i = e(this).attr("title");
          o === void 0 && (o = t), t == a && o == r && (s = c), typeof i == "undefined" && (i = ''), n.push({
            src: t,
            downloadUrl: t,
            thumb: o,
            subHtml: i
          });
        }), lightGallery(this, {
          plugins: [lgThumbnail, lgZoom],
          dynamic: !0,
          hash: !1,
          galleryId: t,
          dynamicEl: n,
          thumbWidth: 80,
          index: s
        }).openGallery();
      }), e(document).on("click", "a.view-video", function (t) {
        t.preventDefault();
        var n = e(this).attr("href");
        lightGallery(this, {
          dynamic: !0,
          plugins: [lgThumbnail, lgZoom, lgVideo, lgVimeoThumbnail],
          dynamicEl: [{
            src: n,
            thumb: '',
            subHtml: ''
          }]
        }).openGallery();
      });
    }
  }, e(document).ready(function () {
    APP.gallery.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.headerSticky = {
    scroll_offset_before: 0,
    bs_theme: "light",
    init: function () {
      this.sticky(), this.scroll(), this.resize(), this.processSticky(), this.resetHeight();
    },
    sticky: function () {
      e(".header-sticky .sticky-area").each(function () {
        var n,
            t = e(this);
        if (!t.is(":visible")) return;
        t.parent().hasClass("sticky-area-wrap") || t.wrap('<div class="sticky-area-wrap"></div>'), n = t.parent(), n.height(t.outerHeight());
      });
    },
    resize: function () {
      e(document).on("after_prevent_transition_resize", function () {
        APP.headerSticky.sticky(), APP.headerSticky.processSticky(), APP.headerSticky.resetHeight();
      });
    },
    scroll: function () {
      e(window).on("scroll", function () {
        APP.headerSticky.processSticky();
      });
    },
    processSticky: function () {
      var n = e(window).scrollTop(),
          t = e(".main-header"),
          s = !1;
      t.hasClass("navbar-dark") && (s = !0), e(".header-sticky .sticky-area").each(function () {
        if (o = e(this), !o.is(":visible")) return;
        var o,
            i = o.parent(),
            a = 0,
            c = i.offset().top,
            r = e("body").css("border-width");
        r !== '' && (a += parseInt(r)), o.hasClass("unset-mode-when-sticky") && o.attr("data-bs-theme") !== void 0 && document.documentElement.hasAttribute("data-bs-theme") && (this.bs_theme = o.attr("data-bs-theme")), c - a < n ? (o.css("position", "fixed"), o.css("top", a + "px"), i.addClass("sticky"), o.hasClass("unset-mode-when-sticky") && document.documentElement.hasAttribute("data-bs-theme") && (o.removeAttr("data-bs-theme"), this.bs_theme !== void 0 && o.removeAttr("data-bs-theme")), s && (t.removeClass("navbar-dark"), t.addClass("navbar-light"), t.addClass("navbar-light-sticky"))) : (t.hasClass("navbar-light-sticky") && (t.addClass("navbar-dark"), t.removeClass("navbar-light"), t.removeClass("navbar-light-sticky")), i.hasClass("sticky") && (o.css("position", '').css("top", ''), i.removeClass("sticky")), o.hasClass("unset-mode-when-sticky") && document.documentElement.hasAttribute("data-bs-theme") && o.attr("data-bs-theme", this.bs_theme));
      }), APP.headerSticky.scroll_offset_before > n ? e(".header-sticky-smart .sticky-area").each(function () {
        e(this).hasClass("header-hidden") && e(this).removeClass("header-hidden");
      }) : e(".header-sticky-smart .sticky-area").each(function () {
        var t = e(this).parent();
        t.length && APP.headerSticky.scroll_offset_before > t.offset().top + e(this).outerHeight() && !e(this).hasClass("header-hidden") && e(this).addClass("header-hidden");
      }), APP.headerSticky.scroll_offset_before = n;
    },
    resetHeight: function () {
      e(".header-sticky .sticky-area").each(function () {
        let n = e(this),
            t = n.parent(),
            s = t.hasClass("sticky");
        s && t.removeClass("sticky"), t.height(n.outerHeight()), s && t.addClass("sticky");
      });
    }
  }, APP.header = {
    init: function () {
      e(".header.disable-transition-all").removeClass("disable-transition-all");
    }
  }, e(document).ready(function () {
    APP.headerSticky.init(), APP.header.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.hightlight = {
    init: function () {
      this.initHighlight();
    },
    formatHtml: function (e) {
      return html_beautify(e);
    },
    initHighlight: function () {
      e("code.hljs").each(function () {
        let t = e(this).data("content");

        if (t) {
          t = APP.hightlight.formatHtml(JSON.parse(t));
          let e = hljs.highlight(t, {
            language: "html"
          }).value;
          this.innerHTML = e.replace(/^\s*[\r\n]/gm, "");
        }
      });
    }
  }, APP.hightlight.init();
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.isotopeFilter = {
    init: function () {
      this.setupIsotope(), this.setupIsotopeFilter();
    },
    setupIsotope: function () {
      e("[data-options-isotope]").each(function () {
        var t = e(this).data("options-isotope"),
            n = {},
            t = e.extend({}, n, t);
        e(this).isotope(t);
      });
    },
    setupIsotopeFilter: function () {
      e("[data-isotope-filter]").on("click", function () {
        var t = e(this),
            n = e(t.data("isotope-target")),
            s = t.closest("[data-isotope-filter-parent]"),
            o = t.data("isotope-filter");
        n.isotope({
          filter: o
        }), s.find("[data-isotope-filter]").removeClass("active"), t.addClass("active");
      });
    }
  }, e(document).ready(function () {
    APP.isotopeFilter.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.lazyLoad = {
    instanceImage: null,
    instanceBackground: null,
    init: function () {
      if (typeof LazyLoad == "undefined") return;
      var e = this;
      this.handleLazyImages(), this.handleLazyBackgrounds(), setTimeout(function () {
        e.update();
      }, 1e3);
    },
    handleLazyImages: function () {
      this.instanceImage = new LazyLoad({
        elements_selector: ".lazy-image",
        use_native: !0,
        callback_loaded: function (t) {
          e(t).removeClass("lazy-image");
        },
        callback_error: function () {}
      });
    },
    handleLazyBackgrounds: function () {
      this.instanceBackground = new LazyLoad({
        elements_selector: ".lazy-bg",
        data_bg: "bg-src",
        callback_loaded: function (t) {
          e(t).removeClass("lazy-bg"), e(t).find(".placeholder").remove();
        }
      });
    },
    update: function () {
      e(".lazy-image").each(function () {
        var t = e(this).closest(".lazy-image").parent();
      }), this.instanceImage !== null && this.instanceImage.update(), this.instanceBackground !== null && this.instanceBackground.update();
    }
  }, e(document).ready(function () {
    APP.lazyLoad.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.mapBox = {
    init: function () {
      var n,
          t = e(".mapbox-gl");
      if (t.length < 1) return;
      n = {
        style: "mapbox://styles/mapbox/streets-v10",
        center: [-73.9927227, 40.6734035],
        zoom: 16
      }, t.each(function () {
        var t,
            i,
            r,
            s = e(this),
            o = s.data("mapbox-options"),
            c = s.data("mapbox-marker"),
            o = e.extend({}, n, o),
            a = s.attr("id");
        if (a.length < 1) return;
        o.container = a, mapboxgl.accessToken = s.data("mapbox-access-token"), t = new mapboxgl.Map(o), r = e(s.data("marker-target")), i = r.find(".marker-item"), i.length > 0 ? e.each(i, function () {
          var n = e(this).data("marker-style"),
              s = document.createElement("div");
          s.className = n.className, s.style.backgroundImage = "url(" + e(this).data("icon-marker") + ")", s.style.width = n.style.width, s.style.height = n.style.height, new mapboxgl.Marker(s).setLngLat(e(this).data("position")).setPopup(new mapboxgl.Popup({
            className: n.popup.className
          }).setHTML(e(this).html()).setMaxWidth(n.popup.maxWidth)).addTo(t);
        }) : e.each(c, function () {
          var n,
              e = document.createElement("div");
          e.className = this.className, e.style.backgroundImage = "url(" + this.backgroundImage + ")", e.style.backgroundRepeat = this.backgroundRepeat, e.style.width = this.width, e.style.height = this.height, n = new mapboxgl.Marker(e).setLngLat(this.position).addTo(t);
        }), t.scrollZoom.disable(), t.addControl(new mapboxgl.NavigationControl()), t.on("load", function () {
          t.resize();
        });
      });
    }
  }, e(document).ready(function () {
    APP.mapBox.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.parallaxLayer = {
    init: function () {
      if (typeof gsap == "undefined") return;
      e(".parallax-layers").on("mousemove", function (t) {
        t.preventDefault();
        let s = e(this),
            n = e(window),
            o = n.width(),
            i = n.height(),
            a = t.pageX - this.offsetLeft,
            r = t.pageY - this.offsetTop,
            c = a - o / 2,
            l = r - i / 2;
        s.find(".layer").each(function (t, n) {
          var e = .02 + t / 100;
          gsap.to(n, {
            duration: 1,
            x: 1 - c * e,
            y: 1 - l * e
          });
        });
      }).on("mouseleave", function (t) {
        t.preventDefault();
        let n = e(this);
        n.find(".layer").each(function (e, t) {
          let n = .01 + e / 100;
          gsap.to(t, {
            duration: 1,
            x: 0,
            y: 0
          });
        });
      });
    }
  }, APP.parallaxLayer.init();
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.preventTransitionResize = {
    resizeTimer: null,
    beforeWindowWidth: 0,
    init: function () {
      this.beforeWindowWidth = window.outerWidth, this.resize();
    },
    resize: function () {
      e(window).resize(function () {
        let t = window.outerWidth;
        if (t === APP.preventTransitionResize.beforeWindowWidth) return;
        APP.preventTransitionResize.beforeWindowWidth = t, clearTimeout(APP.preventTransitionResize.resizeTimer), e("body").addClass("disable-transition-all"), e(document).trigger("after_prevent_transition_resize"), APP.preventTransitionResize.resizeTimer = setTimeout(function () {
          e("body").removeClass("disable-transition-all");
        }, 400);
      });
    }
  }, e(document).ready(function () {
    APP.preventTransitionResize.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.productTabsMobile = {
    init: function () {
      this.tabsMobile();
    },
    tabsMobile: function () {
      e(".product-tabs-mobile button").on("click", function (t) {
        t.preventDefault();
        var n = e(this),
            s = n.attr("data-control"),
            o = e("#" + s);
        o.trigger("click");
      });
    }
  }, e(document).ready(function () {
    APP.productTabsMobile.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.quickview = {
    init: function () {
      this.quickviewLoad();
    },
    quickviewLoad: function () {
      e("a.quick-view").on("click", function (e) {
        e.preventDefault();
      });
      const t = document.getElementById("quickViewModal");

      if (t != null) {
        var n = e("#quickViewModal").find("#slider"),
            s = e("#quickViewModal").find("#slider-thumb");
        t.addEventListener("shown.bs.modal", () => {
          n.slick("refresh"), s.slick("refresh");
        });
      }
    }
  }, e(document).ready(function () {
    APP.quickview.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.scrollSpy = {
    init: function () {
      this.scrollSpyLanding();
    },
    scrollSpyLanding: function () {
      var t = e("#landingMenu");
      if (t.length < 1) return;
      const n = new bootstrap.ScrollSpy(document.body, {
        target: "#landingMenu"
      });
    }
  }, e(document).ready(function () {
    APP.scrollSpy.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.singleShop = {
    init: function () {
      this.shopFBT();
    },
    shopFBT: function () {
      var n = e(".frequently-bought-togheter"),
          s = n.find(".frequently-bought-togheter-item"),
          t = s.find(".add-to-item");
      const i = t.attr("data-bs-title"),
            a = t.attr("data-bs-added");
      if (n.length < 1 && s.length < 1) return;
      t.unbind("click").on("click", function (s) {
        s.preventDefault();
        var t = e(this),
            n = t.attr("aria-describedby");
        t.hasClass("checked") ? (t.removeClass("checked"), t.siblings(".form-check-input").prop("checked", !1), t.html('<svg class="icon icon-plus"><use xlink:href="#icon-plus"></use></svg>'), o(t, n, i)) : (t.addClass("checked"), t.siblings(".form-check-input").prop("checked", !0), t.html('<svg class="icon icon-check-bold"><use xlink:href="#icon-check-bold"></use></svg>'), o(t, n, a));
      });

      function o(o, t, n) {
        var s = e("#" + t);
        if (t !== '' && s.length < 1) return;
        o.attr("data-bs-title", n), s.find(".tooltip-inner").html(n);
      }
    }
  }, e(document).ready(function () {
    APP.singleShop.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.slickSlider = {
    init: function () {
      this.slickSetup(), this.animateSlider();
    },
    slickSetup: function (n) {
      n !== void 0 ? t = n : t = e(".slick-slider");
      var t,
          s = {
        slidesToScroll: 1,
        slidesToShow: 1,
        adaptiveHeight: !0,
        arrows: !0,
        dots: !0,
        autoplay: !1,
        autoplaySpeed: 3e3,
        centerMode: !1,
        centerPadding: "50px",
        draggable: !0,
        fade: !1,
        focusOnSelect: !1,
        infinite: !1,
        pauseOnHover: !1,
        responsive: [],
        rtl: !1,
        speed: 300,
        vertical: !1,
        prevArrow: '<div class="slick-prev" aria-label="Previous"><svg class="icon"><use xlink:href="#icon-chevron-left"></use></svg></div>',
        nextArrow: '<div class="slick-next" aria-label="Next"><svg class="icon"><use xlink:href="#icon-chevron-right"></use></svg></div>',
        customPaging: function () {
          return e("<span></span>");
        }
      };
      t.each(function () {
        var t,
            n = e(this);
        n.hasClass("slick-initialized") || (t = n.data("slick-options"), typeof t.appendArrow != "undefined" && (t.appendArrows = e(t.appendArrow)), n.hasClass("custom-arrows-02") && (t.prevArrow = e(".custom-arrows-02-prev"), t.nextArrow = e(".custom-arrows-02-next")), n.hasClass("our-best-seller-4") && (t.customPaging = function (t, n) {
          var e,
              s = '';
          return n < 9 ? s = n + 1 : s = n + 1, e = '', t.slideCount < 9 ? e = t.slideCount : e = t.slideCount, '<span class="dot-text">Show</span><span class="dot">' + s + "</span>" + '<span class="dot-divider">/</span><span class="dot">' + e + "</span>";
        }), t = e.extend({}, s, t), n.slick(t), n.on("setPosition", function (o, t) {
          var s = 0;
          t.$slides.each(function () {
            var n = e(this);
            n.hasClass("slick-active") && t.options.adaptiveHeight && t.options.slidesToShow > 1 && t.options.vertical === !1 && s < n.outerHeight() && (s = n.outerHeight());
          }), s !== 0 && n.find("> .slick-list").animate({
            height: s
          }, 500);
        }));
      });
    },
    animateSlider: function () {
      var t = e(".slick-slider");
      t.on("beforeChange", function () {
        var s = e(this).find(".slick-slide:not(.slick-active)"),
            n = s.find(".animate__animated"),
            t = '';
        if (n.length <= 0) return;
        n.each(function () {
          t = e(this).attr("data-animate"), t.length && e(this).removeClass("animate__animated").removeClass("animate__" + t);
        });
      }), t.on("afterChange", function () {
        var s = e(this).find(".slick-active"),
            n = s.find("[data-animate]:not(.animate__animated)"),
            t = '';
        if (APP.lazyLoad && APP.lazyLoad.update(), n.length <= 0) return;
        n.each(function () {
          t = e(this).attr("data-animate"), t.length && e(this).addClass("animate__animated").addClass("animate__" + t);
        });
      });
    }
  }, e(document).ready(function () {
    APP.slickSlider.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.styleInline = {
    init: function () {
      this.initCss();
    },
    initCss: function () {
      e("[data-styles]").each(function () {
        if (this.dataset.styles) {
          let n = this.dataset.styles.split(";");

          for (var t in n) {
            let s = n[t].split(":");
            s.length === 2 && e(this).css(s[0].trim(), s[1].trim());
          }
        }
      });
    }
  }, APP.styleInline.init();
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.tabs = {
    init: function () {
      this.tab_accordion(), this.tab_dropdown();
    },
    tab_accordion: function () {
      e('[data-bs-toggle="tab-accordion"] [data-bs-toggle="tab"]').on("shown.bs.tab", function (t) {
        var i = e(t.target),
            a = e(t.relatedTarget),
            n = e(this).closest('[data-bs-toggle="tab-accordion"]'),
            s = n.find(i.data("bs-target")),
            o = n.find(a.data("bs-target"));
        s.find(".collapse").addClass("show"), o.find(".collapse").removeClass("show"), s.find('[data-bs-toggle="collapse"]').removeClass("collapsed"), o.find('[data-bs-toggle="collapse"]').addClass("collapsed");
      }), e('[data-bs-toggle="tab-accordion"] .collapse').on("shown.bs.collapse", function (i) {
        var t,
            n,
            o,
            s = e(i.target).closest(".tab-pane");
        s.length && (t = e('[data-bs-target="#' + s.attr("id") + '"]'), t.length && (n = t.closest(".nav-tabs"), n.length && (n.find('[data-bs-toggle="tab"]').removeClass("active"), o = n.next(".tab-content"), o.length && o.find(".tab-pane").removeClass("show active"), s.addClass("show active"), t.addClass("active"))));
      });
    },
    tab_dropdown: function () {
      e('[data-bs-toggle="tab-dropdown"] [data-bs-toggle="tab"]').on("shown.bs.tab", function (n) {
        var s = e(n.target),
            i = e(n.relatedTarget),
            t = e(this).closest('[data-bs-toggle="tab-dropdown"]'),
            o = s.data("bs-target");
        t.find('[data-bs-toggle="tab"]').removeClass("active"), t.find('[data-bs-target="' + o + '"]').addClass("active"), t.find('[data-bs-toggle="dropdown"]').text(s.text());
      });
    }
  }, e(document).ready(function () {
    APP.tabs.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.dashboard = {
    init: function () {
      this.chartjs(), this.activeSidebarMenu(), this.dropdownMenuLeft();
    },
    chartjs: function () {
      var t = e(".chartjs");
      t.each(function () {
        var t = e(this),
            s = t.data("chart-type"),
            n = t.data("chart-options"),
            o = t.data("chart-labels"),
            i = t.data("chart-datasets"),
            a = t.data("chart-additional-options"),
            r = a.chatId,
            c = e("#" + r),
            l = {
          maintainAspectRatio: !1
        },
            n = e.extend(!0, l, n),
            d = new Chart(c, {
          type: s,
          data: {
            labels: o,
            datasets: i
          },
          options: n
        });
      });
    },
    dropdownMenuLeft: function () {
      var t = e(".has-children .sidebar-item");
      const n = new bootstrap.Collapse(e(".has-children"), {
        toggle: !1
      });
      e.each(t, function () {
        var t = e(this),
            n = t.parents(".menu-collapse");
        t.hasClass("active") ? setTimeout(function () {
          n.collapse("show");
        }, 100) : n.collapse("hide");
      });
    },
    activeSidebarMenu: function () {
      var n,
          s,
          t = e(".db-sidebar");
      if (t.length < 1) return;
      n = window.location.pathname, s = t.find(".sidebar-link"), s.each(function () {
        var t,
            s = e(this).attr("href").replace("..", '');
        n.indexOf(s) > -1 && (t = e(this).parent(".sidebar-item"), t.addClass("active"));
      });
    }
  }, e(document).ready(function () {
    APP.dashboard.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.select2 = {
    init: function () {
      e(".multiple-select-field").select2({
        theme: "bootstrap-5",
        placeholder: e(this).data("placeholder") ? e(this).data("placeholder") : "Nothing selected",
        containerCssClass: e(this).data("container-css-class"),
        closeOnSelect: !1
      });
    }
  }, e(document).ready(function () {
    APP.select2.init();
  });
}(jQuery);
